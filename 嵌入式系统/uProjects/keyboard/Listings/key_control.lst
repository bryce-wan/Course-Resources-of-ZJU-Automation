C51 COMPILER V9.60.7.0   KEY_CONTROL                                                       05/24/2023 15:55:38 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE KEY_CONTROL
OBJECT MODULE PLACED IN .\Objects\key_control.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE key_control.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listin
                    -gs\key_control.lst) OBJECT(.\Objects\key_control.obj)

line level    source

   1          #include "reg52.h"
   2          
   3          #define num_mode 0
   4          #define time_mode 1
   5          
   6          typedef unsigned int u16;
   7          typedef unsigned char u8;
   8          
   9          u8 code smgduan[17] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07,
  10                                 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71}; // 0~9,A,b,C,d,E,F
  11          u8 mode = 0, timer_start = 0;
  12          int KeyValue[4] = {3, 0, 2, 0};
  13          int KeyTime[7] = {6, 0, 0, 0, 0, 0, 0};
  14          u16 cur_value;
  15          u16 plus = 0;
  16          u16 sub = 0;
  17          u16 tempplus = 0;
  18          u8 change = 0;
  19          u8 dispmode = 0;
  20          
  21          void KeyDown(void);
  22          void Display(void);
  23          void Delay(u16 i);
  24          
  25          void timer0_init(void)
  26          {
  27   1          // TMOD &= 0xF0; // clear the last 4 bits
  28   1          TMOD |= 0x01; // set the last 4 bits to 0001
  29   1          TH0 = 0xd8;   // set the initial value of timer0
  30   1          TL0 = 0xf0;
  31   1          ET0 = 1; // enable timer0 interrupt
  32   1          TR0 = 1; // start timer0
  33   1          PT0 = 1; // set the priority of timer0 interrupt to high
  34   1      }
  35          
  36          void timer0() interrupt 1
  37          {
  38   1          if (timer_start == 1)
  39   1          {
  40   2              // modify = 0;
  41   2              u16 sec = 0;
  42   2              mode = 1;
  43   2              while (1)
  44   2              {
  45   3                  if (TF0 == 1 && timer_start == 1)
  46   3                  {
  47   4                      TF0 = 0;
  48   4                      TH0 = 0Xd8; // set the initial value of timer0
  49   4                      TL0 = 0Xf0;
  50   4                      sec++;
  51   4                      if (sec >= 100)
  52   4                      {
  53   5                          sec = 0;
  54   5                          KeyTime[6]--;
C51 COMPILER V9.60.7.0   KEY_CONTROL                                                       05/24/2023 15:55:38 PAGE 2   

  55   5                          if (KeyTime[6] < 0)
  56   5                          {
  57   6                              KeyTime[6] = 9;
  58   6                              KeyTime[5]--;
  59   6                              if (KeyTime[5] < 0)
  60   6                              {
  61   7                                  KeyTime[5] = 5;
  62   7                                  KeyTime[4]--;
  63   7                                  if (KeyTime[4] < 0)
  64   7                                  {
  65   8                                      KeyTime[4] = 9;
  66   8                                      KeyTime[3]--;
  67   8                                      if (KeyTime[3] < 0)
  68   8                                      {
  69   9                                          KeyTime[3] = 5;
  70   9                                          KeyTime[2]--;
  71   9                                          if (KeyTime[2] < 0)
  72   9                                          {
  73  10                                              KeyTime[2] = 9;
  74  10                                              KeyTime[1]--;
  75  10                                              if (KeyTime[1] < 0)
  76  10                                                  KeyTime[1] = 0;
  77  10                                          }
  78   9                                      }
  79   8                                  }
  80   7                              }
  81   6                          }
  82   5                      }
  83   4                  }
  84   3                  if (timer_start == 1)
  85   3                  {
  86   4                      // tempplus += 1;
  87   4                      // if (tempplus > 100)
  88   4                      // {
  89   4                      //     if (KeyValue[3] + KeyValue[2] * 10 + KeyValue[1] * 100 < 250)
  90   4                      //     {
  91   4                      //         KeyValue[3] += 1;
  92   4                      //         if (KeyValue[3] > 9)
  93   4                      //         {
  94   4                      //             KeyValue[3] = 0;
  95   4                      //             KeyValue[2]++;
  96   4                      //             if (KeyValue[2] > 9)
  97   4                      //             {
  98   4                      //                 KeyValue[2] = 0;
  99   4                      //                 KeyValue[1]++;
 100   4                      //             }
 101   4                      //         }
 102   4                      //     }
 103   4                      //     tempplus = 0;
 104   4                      // }
 105   4                      change += 1;
 106   4                  }
 107   3      
 108   3                  Display(); // display the time
 109   3                  KeyDown(); // check if the key is pressed
 110   3      
 111   3                  if (KeyTime[1] == 0 && KeyTime[2] == 0 && KeyTime[3] == 0 && KeyTime[4] == 0 && KeyTime[5] == 
             -0 && KeyTime[6] == 0) // time is up
 112   3                  {
 113   4                      timer_start = 0;
 114   4                      return;
 115   4                  }
C51 COMPILER V9.60.7.0   KEY_CONTROL                                                       05/24/2023 15:55:38 PAGE 3   

 116   3              }
 117   2          }
 118   1      }
 119          
 120          void main()
 121          {
 122   1          IT0 = 1; // set the interrupt type of INT0 to falling edge
 123   1          EX0 = 1; // enable INT0 interrupt
 124   1          EA = 1;  // enable all interrupt
 125   1          PX0 = 0; // set the priority of INT0 interrupt to low
 126   1      
 127   1          while (1)
 128   1          {
 129   2              Delay(100);
 130   2              KeyDown();
 131   2              Display();
 132   2          }
 133   1      }
 134          
 135          void Delay(u16 i)
 136          {
 137   1          while (i--)
 138   1              ;
 139   1      }
 140          
 141          void KeyDown(void)
 142          {
 143   1          u16 keyboard[4][4] = {{1, 2, 3, 14},
 144   1                                {4, 5, 6, 13},
 145   1                                {7, 8, 9, 12},
 146   1                                {10, 0, 11, 10}}; // keyboard map
 147   1      
 148   1          u8 i = 0, j = 0, k = 0;
 149   1          u8 temp;
 150   1          u8 sec, min, hour;
 151   1          u16 modified_value;
 152   1          static u16 keydelay = 0;
 153   1      
 154   1          cur_value = KeyValue[3] + KeyValue[2] * 10 + KeyValue[1] * 100;
 155   1          P2 = 0x0f;
 156   1          if (P2 != 0x0f)
 157   1          {
 158   2              Delay(1000);
 159   2              if (P2 != 0x0f)
 160   2              {
 161   3                  switch (P2)
 162   3                  {
 163   4                  case (0x07): // 0111
 164   4                      j = 0;
 165   4                      break;
 166   4                  case (0x0b): // 1011
 167   4                      j = 1;
 168   4                      break;
 169   4                  case (0x0d): // 1101
 170   4                      j = 2;
 171   4                      break;
 172   4                  case (0x0e): // 1110
 173   4                      j = 3;
 174   4                      break;
 175   4                  default:
 176   4                      break;
 177   4                  }
C51 COMPILER V9.60.7.0   KEY_CONTROL                                                       05/24/2023 15:55:38 PAGE 4   

 178   3      
 179   3                  P2 = 0xf0;
 180   3                  switch (P2)
 181   3                  {
 182   4                  case 0x70: // 0111
 183   4                      i = 0;
 184   4                      break;
 185   4                  case 0xb0: // 1011
 186   4                      i = 1;
 187   4                      break;
 188   4                  case 0xd0: // 1101
 189   4                      i = 2;
 190   4                      break;
 191   4                  case 0xe0: // 1110
 192   4                      i = 3;
 193   4                      break;
 194   4                  default:
 195   4                      break;
 196   4                  }
 197   3      
 198   3                  switch (mode)
 199   3                  {
 200   4                  case num_mode: // number mode
 201   4      
 202   4                      if ((((i < 3) && (j < 3)) || (i == 3 && j == 1)) && timer_start == 0) // 0~9
 203   4                      {
 204   5                          temp = KeyValue[KeyValue[0]];
 205   5                          KeyValue[KeyValue[0]] = keyboard[i][j];
 206   5      
 207   5                          modified_value = KeyValue[3] + KeyValue[2] * 10 + KeyValue[1] * 100; // get the modifi
             -ed value
 208   5      
 209   5                          if (modified_value > 250)
 210   5                          {
 211   6                              KeyValue[1] = 2;
 212   6                              KeyValue[2] = 5;
 213   6                              KeyValue[3] = 0;
 214   6                          }
 215   5                          else if (modified_value < 20)
 216   5                          {
 217   6                              KeyValue[1] = 0;
 218   6                              KeyValue[2] = 2;
 219   6                              KeyValue[3] = 0;
 220   6                          }
 221   5                      }
 222   4      
 223   4                      else if (i == 3 && j == 2 && timer_start == 0) // [RST] reset the temperature value
 224   4                      {
 225   5                          KeyValue[1] = 0;
 226   5                          KeyValue[2] = 2;
 227   5                          KeyValue[3] = 0;
 228   5                      }
 229   4      
 230   4                      else if (i == 3 && j == 0 && timer_start == 0) // [.] move the decimal point
 231   4                      {
 232   5                          Delay(20000);
 233   5                          KeyValue[0]--;
 234   5                          if (KeyValue[0] < 1)
 235   5                              KeyValue[0] = 3;
 236   5                      }
 237   4      
 238   4                      else if (i == 3 && j == 3) // [MODE] modify the mode (num or time)
C51 COMPILER V9.60.7.0   KEY_CONTROL                                                       05/24/2023 15:55:38 PAGE 5   

 239   4                      {
 240   5                          Delay(20000);
 241   5                          mode += 1;
 242   5                          if (mode > 1)
 243   5                              mode = 0;
 244   5                      }
 245   4      
 246   4                      else if (i == 0 && j == 3 && timer_start == 0) // [++] plus
 247   4                      {
 248   5                          plus += 1;
 249   5                          if (plus > 10)
 250   5                          {
 251   6                              if (cur_value < 250)
 252   6                              {
 253   7                                  // Delay(13000);
 254   7                                  // if (keydelay > 5)
 255   7                                  // {
 256   7                                  //     k = 3;
 257   7                                  // }
 258   7                                  // if (keydelay > 10)
 259   7                                  // {
 260   7                                  //     k = 5;
 261   7                                  // }
 262   7                                  // else
 263   7                                  // {
 264   7                                  //     k = 1;
 265   7                                  // }
 266   7                                  k = 1;
 267   7                                  KeyValue[3] += k;
 268   7                                  if (KeyValue[3] > 9)
 269   7                                  {
 270   8                                      KeyValue[3] = 0;
 271   8                                      KeyValue[2]++;
 272   8                                      if (KeyValue[2] > 9)
 273   8                                      {
 274   9                                          KeyValue[2] = 0;
 275   9                                          KeyValue[1]++;
 276   9                                      }
 277   8                                  }
 278   7                              }
 279   6                              else if (cur_value >= 250)
 280   6                              {
 281   7                                  KeyValue[1] = 2;
 282   7                                  KeyValue[2] = 5;
 283   7                                  KeyValue[3] = 0;
 284   7                              }
 285   6                              keydelay++;
 286   6                              // Delay(50000);
 287   6                              plus = 0;
 288   6                          }
 289   5                          Display();
 290   5                      }
 291   4      
 292   4                      else if (i == 1 && j == 3 && timer_start == 0) // [--] sub
 293   4                      {
 294   5                          sub += 1;
 295   5                          if (sub > 10)
 296   5                          {
 297   6                              if (cur_value > 20)
 298   6                              {
 299   7                                  // Delay(13000);
 300   7                                  // if (keydelay > 5)
C51 COMPILER V9.60.7.0   KEY_CONTROL                                                       05/24/2023 15:55:38 PAGE 6   

 301   7                                  // {
 302   7                                  //     k = 3;
 303   7                                  // }
 304   7                                  // if (keydelay > 10)
 305   7                                  // {
 306   7                                  //     k = 5;
 307   7                                  // }
 308   7                                  // else
 309   7                                  // {
 310   7                                  //     k = 1;
 311   7                                  // }
 312   7                                  k = 1;
 313   7                                  KeyValue[3] -= k;
 314   7                                  if (KeyValue[3] < 0)
 315   7                                  {
 316   8                                      KeyValue[3] = 9;
 317   8                                      KeyValue[2]--;
 318   8                                      if (KeyValue[2] < 0)
 319   8                                      {
 320   9                                          KeyValue[2] = 9;
 321   9                                          KeyValue[1]--;
 322   9                                      }
 323   8                                  }
 324   7                              }
 325   6                              else if (cur_value <= 20)
 326   6                              {
 327   7                                  KeyValue[1] = 0;
 328   7                                  KeyValue[2] = 2;
 329   7                                  KeyValue[3] = 0;
 330   7                              }
 331   6                              keydelay++;
 332   6                              // Delay(50000);
 333   6                              sub = 0;
 334   6                          }
 335   5                          Display();
 336   5                      }
 337   4                      break;
 338   4      
 339   4                  case time_mode: // time mode
 340   4      
 341   4                      if ((((i < 3) && (j < 3)) || (i == 3 && j == 1)) && timer_start == 0) // 0~9
 342   4                      {
 343   5                          temp = KeyTime[KeyTime[0]];
 344   5                          KeyTime[KeyTime[0]] = keyboard[i][j];
 345   5      
 346   5                          sec = KeyTime[6] + 10 * KeyTime[5];
 347   5                          min = KeyTime[4] + 10 * KeyTime[3];
 348   5                          hour = KeyTime[2] + 10 * KeyTime[1];
 349   5                          if (sec >= 60 || min >= 60 || hour >= 24)
 350   5                          {
 351   6                              KeyTime[KeyTime[0]] = temp;
 352   6                          }
 353   5                      }
 354   4      
 355   4                      else if (i == 3 && j == 0 && timer_start == 0) // [.] move the decimal point
 356   4                      {
 357   5                          Delay(20000);
 358   5                          KeyTime[0]--;
 359   5                          if (KeyTime[0] < 1)
 360   5                              KeyTime[0] = 6;
 361   5                      }
 362   4      
C51 COMPILER V9.60.7.0   KEY_CONTROL                                                       05/24/2023 15:55:38 PAGE 7   

 363   4                      else if (i == 3 && j == 2 && timer_start == 0) // [RST] reset the temperature value
 364   4                      {
 365   5                          k = 0;
 366   5                          for (k = 1; k <= 6; k++)
 367   5                              KeyTime[k] = 0;
 368   5                      }
 369   4      
 370   4                      else if (i == 3 && j == 3) // [MODE] modify the mode (num or time)
 371   4                      {
 372   5                          // modify = 1;
 373   5                          Delay(20000);
 374   5                          mode += 1;
 375   5                          if (mode > 1)
 376   5                              mode = 0;
 377   5                      }
 378   4      
 379   4                      else if (i == 0 && j == 3) // [STRAT] start the timer
 380   4                      {
 381   5                          if (timer_start == 0)
 382   5                          {
 383   6                              timer_start = 1;
 384   6                              timer0_init();
 385   6                          }
 386   5                      }
 387   4      
 388   4                      else if (i == 1 && j == 3) // [STOP] stop the timer
 389   4                      {
 390   5                          timer_start = 0;
 391   5                      }
 392   4                      break;
 393   4                  }
 394   3              }
 395   2          }
 396   1          else
 397   1          {
 398   2              keydelay = 0;
 399   2          }
 400   1      }
 401          
 402          void Display(void) // display the value
 403          {
 404   1          u8 i;
 405   1          // save_mode = mode;
 406   1          if (timer_start == 0)
 407   1          {
 408   2              switch (mode)
 409   2              {
 410   3              case num_mode:
 411   3                  for (i = 0; i < 8; i++)
 412   3                  {
 413   4                      P0 = i;
 414   4                      if (i == 0)
 415   4                      {
 416   5                          P1 = smgduan[mode]; // dispaly the mode
 417   5                      }
 418   4                      else if (i != KeyValue[0] + 4)
 419   4                          P1 = smgduan[KeyValue[i - 4]];
 420   4                      else
 421   4                          P1 = smgduan[KeyValue[i - 4]] + 128;
 422   4                      Delay(100);
 423   4                      P1 = 0;
 424   4                      if (i == 0)
C51 COMPILER V9.60.7.0   KEY_CONTROL                                                       05/24/2023 15:55:38 PAGE 8   

 425   4                          i = i + 4;
 426   4                  }
 427   3                  break;
 428   3      
 429   3              case time_mode:
 430   3                  for (i = 0; i < 8; i++)
 431   3                  {
 432   4                      P0 = i;
 433   4                      if (i == 0)
 434   4                      {
 435   5                          P1 = smgduan[mode];
 436   5                      }
 437   4                      else if (i != KeyTime[0] + 1)
 438   4                          P1 = smgduan[KeyTime[i - 1]];
 439   4                      else
 440   4                          P1 = smgduan[KeyTime[i - 1]] + 128;
 441   4                      Delay(100);
 442   4                      P1 = 0;
 443   4                      if (i == 0)
 444   4                          i = i + 1;
 445   4                  }
 446   3                  break;
 447   3              }
 448   2          }
 449   1      
 450   1          else if (timer_start == 1)
 451   1          {
 452   2              if (change > 100)
 453   2              {
 454   3                  if (dispmode == 1)
 455   3                      dispmode = 0;
 456   3                  else
 457   3                      dispmode = 1;
 458   3                  change = 0;
 459   3              }
 460   2      
 461   2              switch (dispmode)
 462   2              {
 463   3              case num_mode:
 464   3                  for (i = 0; i < 8; i++)
 465   3                  {
 466   4                      P0 = i;
 467   4                      if (i == 0)
 468   4                      {
 469   5                          P1 = smgduan[mode]; // dispaly the mode
 470   5                      }
 471   4                      else if (i != KeyValue[0] + 4)
 472   4                          P1 = smgduan[KeyValue[i - 4]];
 473   4                      else
 474   4                          P1 = smgduan[KeyValue[i - 4]] + 128;
 475   4                      Delay(100);
 476   4                      P1 = 0;
 477   4                      if (i == 0)
 478   4                          i = i + 4;
 479   4                  }
 480   3                  break;
 481   3      
 482   3              case time_mode:
 483   3                  for (i = 0; i < 8; i++)
 484   3                  {
 485   4                      P0 = i;
 486   4                      if (i == 0)
C51 COMPILER V9.60.7.0   KEY_CONTROL                                                       05/24/2023 15:55:38 PAGE 9   

 487   4                      {
 488   5                          P1 = smgduan[mode];
 489   5                      }
 490   4                      else if (i != KeyTime[0] + 1)
 491   4                          P1 = smgduan[KeyTime[i - 1]];
 492   4                      else
 493   4                          P1 = smgduan[KeyTime[i - 1]] + 128;
 494   4                      Delay(100);
 495   4                      P1 = 0;
 496   4                      if (i == 0)
 497   4                          i = i + 1;
 498   4                  }
 499   3                  break;
 500   3              }
 501   2          }
 502   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1900    ----
   CONSTANT SIZE    =     49    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     36      38
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
